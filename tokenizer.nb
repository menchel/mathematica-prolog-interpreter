(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[      8136,        204]
NotebookOptionsPosition[      7427,        184]
NotebookOutlinePosition[      7868,        201]
CellTagsIndexPosition[      7825,        198]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell["\<\
First step in our program is the tokenizer. 
We need to get input, and recieve a tokened version of our program line by line
\
\>", "Text",
 CellChangeTimes->{{3.9567454998057785`*^9, 3.956745557813776*^9}, {
  3.956749037417858*^9, 
  3.9567490796638927`*^9}},ExpressionUUID->"d951a25d-6d12-ab4b-afb5-\
370998b0a484"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"tokenCreator", "[", "inputCode_String", "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "tokens", "}"}], ",", "\n", "\n", "  ", 
      RowBox[{
       RowBox[{"tokens", " ", "=", " ", 
        RowBox[{"StringCases", "[", "\n", "    ", 
         RowBox[{"inputCode", ",", "\n", "    ", 
          RowBox[{"{", "\n", "      ", 
           RowBox[{
            RowBox[{
             RowBox[{"s", " ", ":", " ", 
              RowBox[{"RegularExpression", "[", "\"\<\\\\s+\>\"", "]"}]}], 
             " ", ":>", " ", "Nothing"}], ",", "\n", "      ", 
            RowBox[{
             RowBox[{"s", " ", ":", " ", 
              RowBox[{
              "RegularExpression", "[", "\"\<[a-z][a-zA-Z0-9_]*\>\"", "]"}]}],
              " ", ":>", " ", 
             RowBox[{"{", 
              RowBox[{"\"\<Atom\>\"", ",", " ", "s"}], "}"}]}], ",", "\n", 
            "      ", 
            RowBox[{
             RowBox[{"s", " ", ":", " ", 
              RowBox[{
              "RegularExpression", "[", "\"\<[A-Z_][a-zA-Z0-9_]*\>\"", 
               "]"}]}], " ", ":>", " ", 
             RowBox[{"{", 
              RowBox[{"\"\<Variable\>\"", ",", " ", "s"}], "}"}]}], ",", "\n",
             "      ", 
            RowBox[{
             RowBox[{"s", " ", ":", " ", 
              RowBox[{
              "RegularExpression", "[", "\"\<\\\\d+(?:\\\\.\\\\d+)?\>\"", 
               "]"}]}], " ", ":>", " ", 
             RowBox[{"{", 
              RowBox[{"\"\<Number\>\"", ",", " ", "s"}], "}"}]}], ",", "\n", 
            "      ", 
            RowBox[{
             RowBox[{"s", " ", ":", " ", 
              RowBox[{
              "RegularExpression", "[", "\"\<'(?:[^']|'')*'\>\"", "]"}]}], 
             " ", ":>", " ", 
             RowBox[{"{", 
              RowBox[{"\"\<String\>\"", ",", " ", "s"}], "}"}]}], ",", "\n", 
            "      ", "\n", "      ", 
            RowBox[{"\"\<:-\>\"", " ", ":>", " ", 
             RowBox[{"{", 
              RowBox[{"\"\<ColonDash\>\"", ",", " ", "\"\<:-\>\""}], "}"}]}], 
            ",", "\n", "      ", 
            RowBox[{"\"\<.\>\"", " ", ":>", " ", 
             RowBox[{"{", 
              RowBox[{"\"\<Dot\>\"", ",", " ", "\"\<.\>\""}], "}"}]}], ",", 
            "\n", "      ", 
            RowBox[{"\"\<,\>\"", " ", ":>", " ", 
             RowBox[{"{", 
              RowBox[{"\"\<Comma\>\"", ",", " ", "\"\<,\>\""}], "}"}]}], ",", 
            "\n", "      ", 
            RowBox[{"\"\<(\>\"", " ", ":>", " ", 
             RowBox[{"{", 
              RowBox[{"\"\<LParen\>\"", ",", " ", "\"\<(\>\""}], "}"}]}], ",",
             "\n", "      ", 
            RowBox[{"\"\<)\>\"", " ", ":>", " ", 
             RowBox[{"{", 
              RowBox[{"\"\<RParen\>\"", ",", " ", "\"\<)\>\""}], "}"}]}], ",",
             "\n", "      ", 
            RowBox[{"\"\<[\>\"", " ", ":>", " ", 
             RowBox[{"{", 
              RowBox[{"\"\<LBracket\>\"", ",", " ", "\"\<[\>\""}], "}"}]}], ",",
             "\n", "      ", 
            RowBox[{"\"\<]\>\"", " ", ":>", " ", 
             RowBox[{"{", 
              RowBox[{"\"\<RBracket\>\"", ",", " ", "\"\<]\>\""}], "}"}]}], ",",
             "\n", "      ", 
            RowBox[{"\"\<|\>\"", " ", ":>", " ", 
             RowBox[{"{", 
              RowBox[{"\"\<Bar\>\"", ",", " ", "\"\<|\>\""}], "}"}]}]}], "\n",
            "    ", "}"}]}], "\n", "  ", "]"}]}], ";", "\n", "  ", 
       "tokens"}]}], "\n", "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"tokenizeFileLines", "[", "fileName_String", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"lines", ",", " ", "tokensPerLine"}], "}"}], ",", "\n", "  ", 
     RowBox[{
      RowBox[{"lines", " ", "=", " ", 
       RowBox[{"Import", "[", 
        RowBox[{"fileName", ",", " ", "\"\<Lines\>\""}], "]"}]}], ";", "\n", 
      "  ", 
      RowBox[{"tokensPerLine", " ", "=", " ", 
       RowBox[{"tokenCreator", " ", "/@", " ", "lines"}]}], ";", "\n", "  ", 
      "\n", "  ", 
      RowBox[{"Do", "[", "\n", "    ", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{"\"\<Line \>\"", ",", " ", "i", ",", " ", "\"\<: \>\"", ",", 
          " ", 
          RowBox[{"tokensPerLine", "[", 
           RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", "\n", "    ", 
        RowBox[{"{", 
         RowBox[{"i", ",", " ", 
          RowBox[{"Length", "[", "lines", "]"}]}], "}"}]}], "\n", "  ", "]"}],
       ";", "\n", "  ", "\n", "  ", "tokensPerLine"}]}], "  ", 
    RowBox[{"(*", " ", 
     RowBox[{"Return", " ", "tokens", " ", "for", " ", "all", " ", "lines"}], 
     " ", "*)"}], "\n", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"tokenizeFileLines", "[", 
   RowBox[{"(*", " ", 
    RowBox[{"path", " ", "to", " ", "file"}], " ", "*)"}], "]"}], 
  ";"}], "\n"}], "Code",
 CellChangeTimes->{{3.9567456410786095`*^9, 3.9567456903152046`*^9}, {
   3.9567457266747456`*^9, 3.956745859048321*^9}, {3.95674591420656*^9, 
   3.9567459600785065`*^9}, {3.9567460860443783`*^9, 
   3.9567461048725204`*^9}, {3.9567477428032284`*^9, 3.956747759016367*^9}, 
   3.956748008613577*^9, {3.956748082729431*^9, 3.9567480845592346`*^9}, {
   3.9567483806106777`*^9, 3.956748410343191*^9}, 3.9567484772790375`*^9, {
   3.9567485189541283`*^9, 3.9567485202188854`*^9}, {3.9567486196483994`*^9, 
   3.9567486240665894`*^9}, {3.956748776765774*^9, 3.956748777426193*^9}, {
   3.956748850093342*^9, 3.9567488508333225`*^9}, {3.956748887760809*^9, 
   3.956748891199341*^9}, {3.9567489305603466`*^9, 3.9567489578969574`*^9}, {
   3.956748989077959*^9, 3.956749031028387*^9}, {3.956749153725569*^9, 
   3.9567491895153656`*^9}},ExpressionUUID->"05785c45-fa39-824c-b7d8-\
8d8e997ed50a"],

Cell[BoxData[
 TemplateBox[{
  "Import", "nffil", 
   "\"File \\!\\(\\*RowBox[{\\\"\\\\\\\"..\\\\\\\\\\\\\\\\..\\\\\\\\\\\\\\\\..\
\\\\\\\\\\\\\\\\..\\\\\\\\\\\\\\\\test.pl\\\\\\\"\\\"}]\\) not found during \
\\!\\(\\*RowBox[{\\\"Import\\\"}]\\).\"", 2, 213, 14, 30260579951509815970, 
   "Local"},
  "MessageTemplate",
  BaseStyle->"MSG"]], "Message",
 CellChangeTimes->{3.9567491679985504`*^9},
 CellLabel->
  "During evaluation of \
In[211]:=",ExpressionUUID->"dd2bbe80-7580-664b-b37a-8e04320be644"]
}, Open  ]],

Cell["", "Text",
 CellChangeTimes->{{3.9567461853403893`*^9, 3.956746191910227*^9}, {
  3.956748447921236*^9, 
  3.956748449327797*^9}},ExpressionUUID->"b0334e5a-4cd7-5b4f-9e6b-\
e20c9df6f2b8"]
},
WindowSize->{743.4, 524.4},
WindowMargins->{{Automatic, 130.80000000000007`}, {
  9.600000000000023, Automatic}},
FrontEndVersion->"14.2 for Microsoft Windows (64-bit) (December 26, 2024)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"2832634a-bfb8-c84f-9770-7b714f2f19a6"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[554, 20, 328, 8, 77, "Text",ExpressionUUID->"d951a25d-6d12-ab4b-afb5-370998b0a484"],
Cell[CellGroupData[{
Cell[907, 32, 5803, 129, 682, "Code",ExpressionUUID->"05785c45-fa39-824c-b7d8-8d8e997ed50a"],
Cell[6713, 163, 502, 12, 26, "Message",ExpressionUUID->"dd2bbe80-7580-664b-b37a-8e04320be644"]
}, Open  ]],
Cell[7230, 178, 193, 4, 33, "Text",ExpressionUUID->"b0334e5a-4cd7-5b4f-9e6b-e20c9df6f2b8"]
}
]
*)

